{
  "version": 3,
  "sources": ["../../../../../markdown-to-jsx/index.tsx"],
  "sourcesContent": ["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n{2,})/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R =\n  /^(.*\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  let tableRow = source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, HTML)\n    .split(/( *(?:`[^`]*`|<.*?>.*?<\\/.*?>(?!<\\/.*?>)|\\\\\\||\\|) *)/)\n    .reduce((nodes, fragment) => {\n      if (fragment.trim() === '|')\n        nodes.push(\n          tableOutput\n            ? { type: RuleType.tableSeparator }\n            : { type: RuleType.text, text: fragment }\n        )\n      else if (fragment !== '') nodes.push.apply(nodes, parse(fragment, state))\n      return nodes\n    }, [] as MarkdownToJSX.ParserResult[])\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.trimEnd()\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      render(node, output, state) {\n        return (\n          <blockquote key={state.key}>\n            {output(node.children, state)}\n          </blockquote>\n        )\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || output(node.children, state)}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackChildren, state)}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: MarkdownToJSX.ParserResult[]\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => React.ReactChild\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactChild,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactChild\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"],
  "mappings": "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",
  "names": ["RuleType", "blockQuote", "breakLine", "breakThematic", "codeBlock", "codeFenced", "codeInline", "footnote", "footnoteReference", "gfmTask", "heading", "headingSetext", "htmlBlock", "htmlComment", "htmlSelfClosing", "image", "link", "linkAngleBraceStyleDetector", "linkBareUrlDetector", "linkMailtoDetector", "newlineCoalescer", "orderedList", "paragraph", "ref", "refImage", "refLink", "table", "tableSeparator", "text", "textBolded", "textEmphasized", "textEscaped", "textMarked", "textStrikethroughed", "unorderedList", "Priority", "ATTRIBUTE_TO_JSX_PROP_MAP", "reduce", "obj", "x", "toLowerCase", "for", "namedCodesToUnicode", "amp", "apos", "gt", "lt", "nbsp", "quot", "DO_NOT_PROCESS_HTML_ELEMENTS", "ATTR_EXTRACTOR_R", "AUTOLINK_MAILTO_CHECK_R", "BLOCK_END_R", "BLOCKQUOTE_R", "BLOCKQUOTE_TRIM_LEFT_MULTILINE_R", "BREAK_LINE_R", "BREAK_THEMATIC_R", "CODE_BLOCK_FENCED_R", "CODE_BLOCK_R", "CODE_INLINE_R", "CONSECUTIVE_NEWLINE_R", "CR_NEWLINE_R", "FOOTNOTE_R", "FOOTNOTE_REFERENCE_R", "FORMFEED_R", "FRONT_MATTER_R", "GFM_TASK_R", "HEADING_R", "HEADING_ATX_COMPLIANT_R", "HEADING_SETEXT_R", "HTML_BLOCK_ELEMENT_R", "HTML_CHAR_CODE_R", "HTML_COMMENT_R", "HTML_CUSTOM_ATTR_R", "HTML_SELF_CLOSING_ELEMENT_R", "INTERPOLATION_R", "LINK_AUTOLINK_BARE_URL_R", "LINK_AUTOLINK_MAILTO_R", "LINK_AUTOLINK_R", "CAPTURE_LETTER_AFTER_HYPHEN", "NP_TABLE_R", "REFERENCE_IMAGE_OR_LINK", "REFERENCE_IMAGE_R", "REFERENCE_LINK_R", "SQUARE_BRACKETS_R", "SHOULD_RENDER_AS_BLOCK_R", "TAB_R", "TABLE_TRIM_PIPES", "TABLE_CENTER_ALIGN", "TABLE_LEFT_ALIGN", "TABLE_RIGHT_ALIGN", "INLINE_SKIP_R", "TEXT_BOLD_R", "RegExp", "TEXT_EMPHASIZED_R", "TEXT_MARKED_R", "TEXT_STRIKETHROUGHED_R", "TEXT_ESCAPED_R", "TEXT_PLAIN_R", "TRIM_STARTING_NEWLINES", "HTML_LEFT_TRIM_AMOUNT_R", "UNESCAPE_URL_R", "LIST_ITEM_END_R", "LIST_LOOKBEHIND_R", "ORDERED_LIST_BULLET", "UNORDERED_LIST_BULLET", "generateListItemPrefix", "type", "ORDERED_LIST_ITEM_PREFIX", "UNORDERED_LIST_ITEM_PREFIX", "generateListItemPrefixRegex", "ORDERED_LIST_ITEM_PREFIX_R", "UNORDERED_LIST_ITEM_PREFIX_R", "generateListItemRegex", "ORDERED_LIST_ITEM_R", "UNORDERED_LIST_ITEM_R", "generateListRegex", "bullet", "ORDERED_LIST_R", "UNORDERED_LIST_R", "generateListRule", "h", "ordered", "LIST_R", "LIST_ITEM_R", "LIST_ITEM_PREFIX_R", "match", "source", "state", "prevCapture", "isStartOfLine", "exec", "list", "inline", "simple", "order", "parse", "capture", "start", "items", "replace", "lastItemWasAParagraph", "map", "item", "i", "space", "length", "spaceRegex", "content", "isLastItem", "thisItemIsAParagraph", "indexOf", "oldStateInline", "oldStateList", "adjustedContent", "result", "render", "node", "output", "key", "undefined", "LINK_R", "IMAGE_R", "NON_PARAGRAPH_BLOCK_SYNTAXES", "BLOCK_SYNTAXES", "slugify", "str", "parseTableAlignCapture", "alignCapture", "test", "parseTableRow", "tableOutput", "prevInTable", "inTable", "tableRow", "trim", "split", "nodes", "fragment", "push", "apply", "cells", "forEach", "trimEnd", "parseTable", "align", "rowText", "header", "children", "getTableStyle", "colIndex", "textAlign", "inlineRegex", "regex", "simpleInlineRegex", "blockRegex", "anyScopeRegex", "matchParagraph", "prevCapturedString", "endsWith", "every", "line", "some", "captured", "sanitizer", "url", "decodeURIComponent", "e", "unescapeUrl", "rawUrlString", "parseInline", "isCurrentlyInline", "isCurrentlySimple", "parseSimpleInline", "parseBlock", "parseCaptureInline", "captureNothing", "renderNothing", "cx", "args", "filter", "Boolean", "join", "get", "src", "path", "fb", "ptr", "frags", "shift", "compiler", "markdown", "options", "tag", "props", "overrideProps", "overrides", "createElement", "override", "_extends", "className", "compile", "input", "forceInline", "forceBlock", "arr", "emitter", "parser", "pop", "wrapper", "jsx", "forceWrapper", "attrStringToMap", "attributes", "raw", "index", "delimiterIdx", "_", "letter", "toUpperCase", "slice", "value", "first", "mappedKey", "normalizedValue", "sanitizeUrlFn", "styles", "kvPair", "substr", "cloneElement", "footnotes", "refs", "rules", "__", "lang", "attrs", "identifier", "target", "href", "completed", "checked", "readOnly", "enforceAtxHeadings", "id", "level", "whitespace", "trimmer", "trimmed", "parseFunc", "r", "tagName", "noInnerParse", "ast", "inAnchor", "alt", "title", "address", "fallbackChildren", "style", "row", "c", "full", "inner", "disableParsingRawHTML", "ruleList", "Object", "keys", "nestedParse", "ruleType", "rule", "currCaptureString", "substring", "parsed", "sort", "typeA", "typeB", "orderA", "orderB", "userRender", "renderer", "renderRule", "patchedRender", "Array", "isArray", "oldKey", "lastWasString", "nodeOut", "isString", "def", "_ref", "_excluded"]
}
